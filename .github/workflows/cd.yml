name: CD

on:
  push:
    tags:
      - 'v*'

jobs:
  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [gateway, marketdata, orders, risk, ws]
        include:
          - service: gateway
            dockerfile: ./build/gateway/Dockerfile
            build_args: ""
          - service: marketdata
            dockerfile: ./Dockerfile
            build_args: "SERVICE=marketdata"
          - service: orders
            dockerfile: ./Dockerfile
            build_args: "SERVICE=orders"
          - service: risk
            dockerfile: ./Dockerfile
            build_args: "SERVICE=risk"
          - service: ws
            dockerfile: ./Dockerfile
            build_args: "SERVICE=ws"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: abdoelhodaky/tradsys
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      # Set up Docker layer caching
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-
            ${{ runner.os }}-buildx-

      - name: Build and push ${{ matrix.service }} image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: abdoelhodaky/tradsys-${{ matrix.service }}:${{ steps.meta.outputs.version }},abdoelhodaky/tradsys-${{ matrix.service }}:latest
          platforms: linux/amd64,linux/arm64
          build-args: ${{ matrix.build_args }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Move cache to prevent it from growing indefinitely
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Update Kubernetes manifests
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          sed -i "s|image: abdoelhodaky/tradsys-gateway:.*|image: abdoelhodaky/tradsys-gateway:${VERSION}|g" deployments/kubernetes/gateway.yaml
          sed -i "s|image: abdoelhodaky/tradsys-marketdata:.*|image: abdoelhodaky/tradsys-marketdata:${VERSION}|g" deployments/kubernetes/marketdata.yaml
          sed -i "s|image: abdoelhodaky/tradsys-orders:.*|image: abdoelhodaky/tradsys-orders:${VERSION}|g" deployments/kubernetes/orders.yaml
          sed -i "s|image: abdoelhodaky/tradsys-risk:.*|image: abdoelhodaky/tradsys-risk:${VERSION}|g" deployments/kubernetes/risk.yaml
          sed -i "s|image: abdoelhodaky/tradsys-ws:.*|image: abdoelhodaky/tradsys-ws:${VERSION}|g" deployments/kubernetes/ws.yaml

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f deployments/kubernetes/
          kubectl rollout status deployment/api-gateway
          kubectl rollout status deployment/marketdata
          kubectl rollout status deployment/orders
          kubectl rollout status deployment/risk
          kubectl rollout status deployment/ws
