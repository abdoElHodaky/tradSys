package strategies

import (
	"time"

	"github.com/abdoElHodaky/tradSys/internal/db/models"
	"github.com/abdoElHodaky/tradSys/internal/db/repositories"
	"github.com/abdoElHodaky/tradSys/internal/orders"
)

// StatisticalArbitrageStrategy implements a pairs trading strategy
type StatisticalArbitrageStrategy struct {
	*BaseStrategy

	// Strategy parameters
	pairID         string
	symbol1        string
	symbol2        string
	ratio          float64
	zScoreEntry    float64
	zScoreExit     float64
	positionSize   float64
	maxPositions   int
	lookbackPeriod int
	updateInterval time.Duration

	// Strategy state
	prices1       []float64
	prices2       []float64
	spread        []float64
	positions     map[string]*models.PairPosition
	spreadMean    float64
	spreadStdDev  float64
	currentZScore float64
	lastUpdate    time.Time

	// Services
	orderService orders.OrderService
	pairRepo     *repositories.PairRepository
	statsRepo    *repositories.PairStatisticsRepository
	positionRepo *repositories.PairPositionRepository
}

// StatisticalArbitrageParams contains parameters for the statistical arbitrage strategy
type StatisticalArbitrageParams struct {
	Name           string
	PairID         string
	Symbol1        string
	Symbol2        string
	Ratio          float64
	ZScoreEntry    float64
	ZScoreExit     float64
	PositionSize   float64
	MaxPositions   int
	LookbackPeriod int
	UpdateInterval time.Duration
}

// SignalType represents the type of trading signal
type SignalType int

const (
	SignalNone SignalType = iota
	SignalLong
	SignalShort
	SignalClose
)

// String returns the string representation of SignalType
func (st SignalType) String() string {
	switch st {
	case SignalNone:
		return "NONE"
	case SignalLong:
		return "LONG"
	case SignalShort:
		return "SHORT"
	case SignalClose:
		return "CLOSE"
	default:
		return "UNKNOWN"
	}
}

// TradingSignal represents a trading signal generated by the strategy
type TradingSignal struct {
	Type      SignalType
	Symbol1   string
	Symbol2   string
	ZScore    float64
	Spread    float64
	Timestamp time.Time
	Strength  float64 // Signal strength (0-1)
}

// PositionState represents the state of a pair position
type PositionState int

const (
	PositionStateNone PositionState = iota
	PositionStateLong
	PositionStateShort
)

// String returns the string representation of PositionState
func (ps PositionState) String() string {
	switch ps {
	case PositionStateNone:
		return "NONE"
	case PositionStateLong:
		return "LONG"
	case PositionStateShort:
		return "SHORT"
	default:
		return "UNKNOWN"
	}
}

// PairMetrics contains statistical metrics for a trading pair
type PairMetrics struct {
	PairID        string
	Symbol1       string
	Symbol2       string
	Correlation   float64
	Cointegration float64
	SpreadMean    float64
	SpreadStdDev  float64
	CurrentSpread float64
	CurrentZScore float64
	LastUpdate    time.Time
	SampleSize    int
}

// PerformanceMetrics contains performance metrics for the strategy
type PerformanceMetrics struct {
	TotalTrades          int
	WinningTrades        int
	LosingTrades         int
	WinRate              float64
	TotalPnL             float64
	MaxDrawdown          float64
	SharpeRatio          float64
	AverageWin           float64
	AverageLoss          float64
	ProfitFactor         float64
	MaxConsecutiveWins   int
	MaxConsecutiveLosses int
	LastUpdated          time.Time
}

// RiskMetrics contains risk metrics for the strategy
type RiskMetrics struct {
	VaR95             float64 // Value at Risk at 95% confidence
	VaR99             float64 // Value at Risk at 99% confidence
	ExpectedShortfall float64 // Expected Shortfall (Conditional VaR)
	Beta              float64 // Beta relative to market
	Volatility        float64 // Annualized volatility
	MaxLeverage       float64 // Maximum leverage used
	CurrentExposure   float64 // Current market exposure
	ConcentrationRisk float64 // Concentration risk measure
}

// StrategyConfig contains configuration for the statistical arbitrage strategy
type StrategyConfig struct {
	// Basic parameters
	Name           string        `yaml:"name" json:"name"`
	PairID         string        `yaml:"pair_id" json:"pair_id"`
	Symbol1        string        `yaml:"symbol1" json:"symbol1"`
	Symbol2        string        `yaml:"symbol2" json:"symbol2"`
	UpdateInterval time.Duration `yaml:"update_interval" json:"update_interval"`

	// Statistical parameters
	LookbackPeriod int     `yaml:"lookback_period" json:"lookback_period"`
	ZScoreEntry    float64 `yaml:"z_score_entry" json:"z_score_entry"`
	ZScoreExit     float64 `yaml:"z_score_exit" json:"z_score_exit"`
	Ratio          float64 `yaml:"ratio" json:"ratio"`

	// Position management
	PositionSize float64 `yaml:"position_size" json:"position_size"`
	MaxPositions int     `yaml:"max_positions" json:"max_positions"`

	// Risk management
	MaxDrawdown  float64 `yaml:"max_drawdown" json:"max_drawdown"`
	StopLoss     float64 `yaml:"stop_loss" json:"stop_loss"`
	TakeProfit   float64 `yaml:"take_profit" json:"take_profit"`
	MaxLeverage  float64 `yaml:"max_leverage" json:"max_leverage"`
	RiskPerTrade float64 `yaml:"risk_per_trade" json:"risk_per_trade"`

	// Execution parameters
	MinSpread         float64       `yaml:"min_spread" json:"min_spread"`
	MaxSpread         float64       `yaml:"max_spread" json:"max_spread"`
	ExecutionDelay    time.Duration `yaml:"execution_delay" json:"execution_delay"`
	SlippageTolerance float64       `yaml:"slippage_tolerance" json:"slippage_tolerance"`

	// Market conditions
	MinVolume     float64        `yaml:"min_volume" json:"min_volume"`
	MaxVolatility float64        `yaml:"max_volatility" json:"max_volatility"`
	TradingHours  []TradingHour  `yaml:"trading_hours" json:"trading_hours"`
	ExcludedDays  []time.Weekday `yaml:"excluded_days" json:"excluded_days"`
}

// TradingHour represents a trading time window
type TradingHour struct {
	Start time.Time `yaml:"start" json:"start"`
	End   time.Time `yaml:"end" json:"end"`
}

// MarketDataPoint represents a single market data point
type MarketDataPoint struct {
	Symbol    string
	Price     float64
	Volume    float64
	Timestamp time.Time
	Source    string
}

// SpreadData represents spread calculation data
type SpreadData struct {
	Price1    float64
	Price2    float64
	Spread    float64
	Ratio     float64
	ZScore    float64
	Timestamp time.Time
}

// OrderRequest represents a request to place an order
type OrderRequest struct {
	Symbol      string
	Side        string // "BUY" or "SELL"
	Quantity    float64
	Price       float64
	OrderType   string // "MARKET", "LIMIT", etc.
	TimeInForce string // "GTC", "IOC", etc.
	ClientID    string
}

// OrderResponse represents the response from placing an order
type OrderResponse struct {
	OrderID    string
	ClientID   string
	Status     string
	FilledQty  float64
	AvgPrice   float64
	Commission float64
	Timestamp  time.Time
	Error      error
}

// Constants for the statistical arbitrage strategy
const (
	// Default configuration values
	DefaultLookbackPeriod = 100
	DefaultZScoreEntry    = 2.0
	DefaultZScoreExit     = 0.5
	DefaultPositionSize   = 10000.0
	DefaultMaxPositions   = 5
	DefaultUpdateInterval = 1 * time.Second

	// Risk management defaults
	DefaultMaxDrawdown  = 0.05 // 5%
	DefaultStopLoss     = 0.02 // 2%
	DefaultTakeProfit   = 0.04 // 4%
	DefaultMaxLeverage  = 2.0
	DefaultRiskPerTrade = 0.01 // 1%

	// Execution defaults
	DefaultMinSpread         = 0.001 // 0.1%
	DefaultMaxSpread         = 0.05  // 5%
	DefaultExecutionDelay    = 100 * time.Millisecond
	DefaultSlippageTolerance = 0.001 // 0.1%

	// Market condition defaults
	DefaultMinVolume     = 1000.0
	DefaultMaxVolatility = 0.3 // 30%

	// Statistical thresholds
	MinCorrelation     = 0.7  // Minimum correlation for pair trading
	MaxCointegrationP  = 0.05 // Maximum p-value for cointegration test
	MinSampleSize      = 50   // Minimum sample size for statistics
	MaxZScoreThreshold = 5.0  // Maximum z-score to prevent outliers

	// Performance tracking
	MetricsUpdateInterval  = 5 * time.Minute
	PerformanceLogInterval = 1 * time.Hour
)

// Error constants
const (
	ErrInsufficientData     = "insufficient data for calculation"
	ErrInvalidParameters    = "invalid strategy parameters"
	ErrPositionLimitReached = "maximum position limit reached"
	ErrRiskLimitExceeded    = "risk limit exceeded"
	ErrMarketClosed         = "market is closed"
	ErrInvalidSymbol        = "invalid trading symbol"
	ErrOrderExecutionFailed = "order execution failed"
)
