// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.12
// source: proto/ws/message.proto

package ws

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WebSocketMessage represents a message sent over WebSocket
type WebSocketMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of message
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Channel the message belongs to
	Channel string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// Symbol the message is related to (optional)
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Timestamp of the message in milliseconds since epoch
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Message payload
	//
	// Types that are valid to be assigned to Payload:
	//
	//	*WebSocketMessage_MarketData
	//	*WebSocketMessage_Order
	//	*WebSocketMessage_Trade
	//	*WebSocketMessage_Heartbeat
	//	*WebSocketMessage_Subscription
	//	*WebSocketMessage_Error
	//	*WebSocketMessage_Text
	Payload       isWebSocketMessage_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebSocketMessage) Reset() {
	*x = WebSocketMessage{}
	mi := &file_proto_ws_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebSocketMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebSocketMessage) ProtoMessage() {}

func (x *WebSocketMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ws_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebSocketMessage.ProtoReflect.Descriptor instead.
func (*WebSocketMessage) Descriptor() ([]byte, []int) {
	return file_proto_ws_message_proto_rawDescGZIP(), []int{0}
}

func (x *WebSocketMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WebSocketMessage) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *WebSocketMessage) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *WebSocketMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *WebSocketMessage) GetPayload() isWebSocketMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *WebSocketMessage) GetMarketData() *MarketDataPayload {
	if x != nil {
		if x, ok := x.Payload.(*WebSocketMessage_MarketData); ok {
			return x.MarketData
		}
	}
	return nil
}

func (x *WebSocketMessage) GetOrder() *OrderPayload {
	if x != nil {
		if x, ok := x.Payload.(*WebSocketMessage_Order); ok {
			return x.Order
		}
	}
	return nil
}

func (x *WebSocketMessage) GetTrade() *TradePayload {
	if x != nil {
		if x, ok := x.Payload.(*WebSocketMessage_Trade); ok {
			return x.Trade
		}
	}
	return nil
}

func (x *WebSocketMessage) GetHeartbeat() *HeartbeatPayload {
	if x != nil {
		if x, ok := x.Payload.(*WebSocketMessage_Heartbeat); ok {
			return x.Heartbeat
		}
	}
	return nil
}

func (x *WebSocketMessage) GetSubscription() *SubscriptionPayload {
	if x != nil {
		if x, ok := x.Payload.(*WebSocketMessage_Subscription); ok {
			return x.Subscription
		}
	}
	return nil
}

func (x *WebSocketMessage) GetError() *ErrorPayload {
	if x != nil {
		if x, ok := x.Payload.(*WebSocketMessage_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *WebSocketMessage) GetText() string {
	if x != nil {
		if x, ok := x.Payload.(*WebSocketMessage_Text); ok {
			return x.Text
		}
	}
	return ""
}

type isWebSocketMessage_Payload interface {
	isWebSocketMessage_Payload()
}

type WebSocketMessage_MarketData struct {
	// Market data message
	MarketData *MarketDataPayload `protobuf:"bytes,5,opt,name=market_data,json=marketData,proto3,oneof"`
}

type WebSocketMessage_Order struct {
	// Order message
	Order *OrderPayload `protobuf:"bytes,6,opt,name=order,proto3,oneof"`
}

type WebSocketMessage_Trade struct {
	// Trade message
	Trade *TradePayload `protobuf:"bytes,7,opt,name=trade,proto3,oneof"`
}

type WebSocketMessage_Heartbeat struct {
	// Heartbeat message
	Heartbeat *HeartbeatPayload `protobuf:"bytes,8,opt,name=heartbeat,proto3,oneof"`
}

type WebSocketMessage_Subscription struct {
	// Subscription message
	Subscription *SubscriptionPayload `protobuf:"bytes,9,opt,name=subscription,proto3,oneof"`
}

type WebSocketMessage_Error struct {
	// Error message
	Error *ErrorPayload `protobuf:"bytes,10,opt,name=error,proto3,oneof"`
}

type WebSocketMessage_Text struct {
	// Generic message with string data
	Text string `protobuf:"bytes,11,opt,name=text,proto3,oneof"`
}

func (*WebSocketMessage_MarketData) isWebSocketMessage_Payload() {}

func (*WebSocketMessage_Order) isWebSocketMessage_Payload() {}

func (*WebSocketMessage_Trade) isWebSocketMessage_Payload() {}

func (*WebSocketMessage_Heartbeat) isWebSocketMessage_Payload() {}

func (*WebSocketMessage_Subscription) isWebSocketMessage_Payload() {}

func (*WebSocketMessage_Error) isWebSocketMessage_Payload() {}

func (*WebSocketMessage_Text) isWebSocketMessage_Payload() {}

// MarketDataPayload contains market data information
type MarketDataPayload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Symbol
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Last price
	LastPrice float64 `protobuf:"fixed64,2,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`
	// Bid price
	BidPrice float64 `protobuf:"fixed64,3,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	// Ask price
	AskPrice float64 `protobuf:"fixed64,4,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	// Bid size
	BidSize float64 `protobuf:"fixed64,5,opt,name=bid_size,json=bidSize,proto3" json:"bid_size,omitempty"`
	// Ask size
	AskSize float64 `protobuf:"fixed64,6,opt,name=ask_size,json=askSize,proto3" json:"ask_size,omitempty"`
	// Volume
	Volume float64 `protobuf:"fixed64,7,opt,name=volume,proto3" json:"volume,omitempty"`
	// Open price
	Open float64 `protobuf:"fixed64,8,opt,name=open,proto3" json:"open,omitempty"`
	// High price
	High float64 `protobuf:"fixed64,9,opt,name=high,proto3" json:"high,omitempty"`
	// Low price
	Low float64 `protobuf:"fixed64,10,opt,name=low,proto3" json:"low,omitempty"`
	// Close price
	Close float64 `protobuf:"fixed64,11,opt,name=close,proto3" json:"close,omitempty"`
	// Timestamp of the market data in milliseconds since epoch
	Timestamp int64 `protobuf:"varint,12,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Exchange the data came from
	Exchange string `protobuf:"bytes,13,opt,name=exchange,proto3" json:"exchange,omitempty"`
	// Order book snapshot (optional)
	OrderBook     *OrderBookSnapshot `protobuf:"bytes,14,opt,name=order_book,json=orderBook,proto3" json:"order_book,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketDataPayload) Reset() {
	*x = MarketDataPayload{}
	mi := &file_proto_ws_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketDataPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataPayload) ProtoMessage() {}

func (x *MarketDataPayload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ws_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataPayload.ProtoReflect.Descriptor instead.
func (*MarketDataPayload) Descriptor() ([]byte, []int) {
	return file_proto_ws_message_proto_rawDescGZIP(), []int{1}
}

func (x *MarketDataPayload) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketDataPayload) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *MarketDataPayload) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *MarketDataPayload) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *MarketDataPayload) GetBidSize() float64 {
	if x != nil {
		return x.BidSize
	}
	return 0
}

func (x *MarketDataPayload) GetAskSize() float64 {
	if x != nil {
		return x.AskSize
	}
	return 0
}

func (x *MarketDataPayload) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MarketDataPayload) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *MarketDataPayload) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *MarketDataPayload) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *MarketDataPayload) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *MarketDataPayload) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MarketDataPayload) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *MarketDataPayload) GetOrderBook() *OrderBookSnapshot {
	if x != nil {
		return x.OrderBook
	}
	return nil
}

// OrderBookSnapshot contains a snapshot of the order book
type OrderBookSnapshot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Bids in the order book
	Bids []*OrderBookLevel `protobuf:"bytes,1,rep,name=bids,proto3" json:"bids,omitempty"`
	// Asks in the order book
	Asks []*OrderBookLevel `protobuf:"bytes,2,rep,name=asks,proto3" json:"asks,omitempty"`
	// Timestamp of the snapshot in milliseconds since epoch
	Timestamp     int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBookSnapshot) Reset() {
	*x = OrderBookSnapshot{}
	mi := &file_proto_ws_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBookSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookSnapshot) ProtoMessage() {}

func (x *OrderBookSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ws_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookSnapshot.ProtoReflect.Descriptor instead.
func (*OrderBookSnapshot) Descriptor() ([]byte, []int) {
	return file_proto_ws_message_proto_rawDescGZIP(), []int{2}
}

func (x *OrderBookSnapshot) GetBids() []*OrderBookLevel {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *OrderBookSnapshot) GetAsks() []*OrderBookLevel {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *OrderBookSnapshot) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// OrderBookLevel represents a level in the order book
type OrderBookLevel struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Price
	Price float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	// Size
	Size float64 `protobuf:"fixed64,2,opt,name=size,proto3" json:"size,omitempty"`
	// Number of orders at this level
	Count         int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBookLevel) Reset() {
	*x = OrderBookLevel{}
	mi := &file_proto_ws_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBookLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookLevel) ProtoMessage() {}

func (x *OrderBookLevel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ws_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookLevel.ProtoReflect.Descriptor instead.
func (*OrderBookLevel) Descriptor() ([]byte, []int) {
	return file_proto_ws_message_proto_rawDescGZIP(), []int{3}
}

func (x *OrderBookLevel) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderBookLevel) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *OrderBookLevel) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// OrderPayload contains order information
type OrderPayload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Order ID
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Client order ID
	ClientOrderId string `protobuf:"bytes,2,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	// Symbol
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Side (BUY or SELL)
	Side string `protobuf:"bytes,4,opt,name=side,proto3" json:"side,omitempty"`
	// Type (MARKET, LIMIT, etc.)
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// Status (NEW, FILLED, CANCELLED, etc.)
	Status string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	// Price
	Price float64 `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`
	// Quantity
	Quantity float64 `protobuf:"fixed64,8,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Filled quantity
	FilledQuantity float64 `protobuf:"fixed64,9,opt,name=filled_quantity,json=filledQuantity,proto3" json:"filled_quantity,omitempty"`
	// Average fill price
	AvgFillPrice float64 `protobuf:"fixed64,10,opt,name=avg_fill_price,json=avgFillPrice,proto3" json:"avg_fill_price,omitempty"`
	// Timestamp of the order in milliseconds since epoch
	Timestamp     int64 `protobuf:"varint,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderPayload) Reset() {
	*x = OrderPayload{}
	mi := &file_proto_ws_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPayload) ProtoMessage() {}

func (x *OrderPayload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ws_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPayload.ProtoReflect.Descriptor instead.
func (*OrderPayload) Descriptor() ([]byte, []int) {
	return file_proto_ws_message_proto_rawDescGZIP(), []int{4}
}

func (x *OrderPayload) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderPayload) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

func (x *OrderPayload) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *OrderPayload) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *OrderPayload) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OrderPayload) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrderPayload) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderPayload) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OrderPayload) GetFilledQuantity() float64 {
	if x != nil {
		return x.FilledQuantity
	}
	return 0
}

func (x *OrderPayload) GetAvgFillPrice() float64 {
	if x != nil {
		return x.AvgFillPrice
	}
	return 0
}

func (x *OrderPayload) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// TradePayload contains trade information
type TradePayload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Trade ID
	TradeId string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	// Order ID
	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Symbol
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Side (BUY or SELL)
	Side string `protobuf:"bytes,4,opt,name=side,proto3" json:"side,omitempty"`
	// Price
	Price float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	// Quantity
	Quantity float64 `protobuf:"fixed64,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Timestamp of the trade in milliseconds since epoch
	Timestamp int64 `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Exchange the trade occurred on
	Exchange string `protobuf:"bytes,8,opt,name=exchange,proto3" json:"exchange,omitempty"`
	// Fee
	Fee float64 `protobuf:"fixed64,9,opt,name=fee,proto3" json:"fee,omitempty"`
	// Fee currency
	FeeCurrency   string `protobuf:"bytes,10,opt,name=fee_currency,json=feeCurrency,proto3" json:"fee_currency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradePayload) Reset() {
	*x = TradePayload{}
	mi := &file_proto_ws_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradePayload) ProtoMessage() {}

func (x *TradePayload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ws_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradePayload.ProtoReflect.Descriptor instead.
func (*TradePayload) Descriptor() ([]byte, []int) {
	return file_proto_ws_message_proto_rawDescGZIP(), []int{5}
}

func (x *TradePayload) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *TradePayload) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *TradePayload) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TradePayload) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *TradePayload) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradePayload) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *TradePayload) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TradePayload) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *TradePayload) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TradePayload) GetFeeCurrency() string {
	if x != nil {
		return x.FeeCurrency
	}
	return ""
}

// HeartbeatPayload contains heartbeat information
type HeartbeatPayload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timestamp of the heartbeat in milliseconds since epoch
	Timestamp     int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatPayload) Reset() {
	*x = HeartbeatPayload{}
	mi := &file_proto_ws_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatPayload) ProtoMessage() {}

func (x *HeartbeatPayload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ws_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatPayload.ProtoReflect.Descriptor instead.
func (*HeartbeatPayload) Descriptor() ([]byte, []int) {
	return file_proto_ws_message_proto_rawDescGZIP(), []int{6}
}

func (x *HeartbeatPayload) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// SubscriptionPayload contains subscription information
type SubscriptionPayload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Action (subscribe or unsubscribe)
	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	// Channel to subscribe to
	Channel string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// Symbol to subscribe to (optional)
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Success status
	Success bool `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	// Message
	Message       string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscriptionPayload) Reset() {
	*x = SubscriptionPayload{}
	mi := &file_proto_ws_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionPayload) ProtoMessage() {}

func (x *SubscriptionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ws_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionPayload.ProtoReflect.Descriptor instead.
func (*SubscriptionPayload) Descriptor() ([]byte, []int) {
	return file_proto_ws_message_proto_rawDescGZIP(), []int{7}
}

func (x *SubscriptionPayload) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SubscriptionPayload) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *SubscriptionPayload) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SubscriptionPayload) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SubscriptionPayload) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ErrorPayload contains error information
type ErrorPayload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error code
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// Error message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Additional data
	Data          string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorPayload) Reset() {
	*x = ErrorPayload{}
	mi := &file_proto_ws_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorPayload) ProtoMessage() {}

func (x *ErrorPayload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ws_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorPayload.ProtoReflect.Descriptor instead.
func (*ErrorPayload) Descriptor() ([]byte, []int) {
	return file_proto_ws_message_proto_rawDescGZIP(), []int{8}
}

func (x *ErrorPayload) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ErrorPayload) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorPayload) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_proto_ws_message_proto protoreflect.FileDescriptor

const file_proto_ws_message_proto_rawDesc = "" +
	"\n" +
	"\x16proto/ws/message.proto\x12\x02ws\"\xc4\x03\n" +
	"\x10WebSocketMessage\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x18\n" +
	"\achannel\x18\x02 \x01(\tR\achannel\x12\x16\n" +
	"\x06symbol\x18\x03 \x01(\tR\x06symbol\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\x128\n" +
	"\vmarket_data\x18\x05 \x01(\v2\x15.ws.MarketDataPayloadH\x00R\n" +
	"marketData\x12(\n" +
	"\x05order\x18\x06 \x01(\v2\x10.ws.OrderPayloadH\x00R\x05order\x12(\n" +
	"\x05trade\x18\a \x01(\v2\x10.ws.TradePayloadH\x00R\x05trade\x124\n" +
	"\theartbeat\x18\b \x01(\v2\x14.ws.HeartbeatPayloadH\x00R\theartbeat\x12=\n" +
	"\fsubscription\x18\t \x01(\v2\x17.ws.SubscriptionPayloadH\x00R\fsubscription\x12(\n" +
	"\x05error\x18\n" +
	" \x01(\v2\x10.ws.ErrorPayloadH\x00R\x05error\x12\x14\n" +
	"\x04text\x18\v \x01(\tH\x00R\x04textB\t\n" +
	"\apayload\"\x92\x03\n" +
	"\x11MarketDataPayload\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12\x1d\n" +
	"\n" +
	"last_price\x18\x02 \x01(\x01R\tlastPrice\x12\x1b\n" +
	"\tbid_price\x18\x03 \x01(\x01R\bbidPrice\x12\x1b\n" +
	"\task_price\x18\x04 \x01(\x01R\baskPrice\x12\x19\n" +
	"\bbid_size\x18\x05 \x01(\x01R\abidSize\x12\x19\n" +
	"\bask_size\x18\x06 \x01(\x01R\aaskSize\x12\x16\n" +
	"\x06volume\x18\a \x01(\x01R\x06volume\x12\x12\n" +
	"\x04open\x18\b \x01(\x01R\x04open\x12\x12\n" +
	"\x04high\x18\t \x01(\x01R\x04high\x12\x10\n" +
	"\x03low\x18\n" +
	" \x01(\x01R\x03low\x12\x14\n" +
	"\x05close\x18\v \x01(\x01R\x05close\x12\x1c\n" +
	"\ttimestamp\x18\f \x01(\x03R\ttimestamp\x12\x1a\n" +
	"\bexchange\x18\r \x01(\tR\bexchange\x124\n" +
	"\n" +
	"order_book\x18\x0e \x01(\v2\x15.ws.OrderBookSnapshotR\torderBook\"\x81\x01\n" +
	"\x11OrderBookSnapshot\x12&\n" +
	"\x04bids\x18\x01 \x03(\v2\x12.ws.OrderBookLevelR\x04bids\x12&\n" +
	"\x04asks\x18\x02 \x03(\v2\x12.ws.OrderBookLevelR\x04asks\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\"P\n" +
	"\x0eOrderBookLevel\x12\x14\n" +
	"\x05price\x18\x01 \x01(\x01R\x05price\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x01R\x04size\x12\x14\n" +
	"\x05count\x18\x03 \x01(\x05R\x05count\"\xc8\x02\n" +
	"\fOrderPayload\x12\x19\n" +
	"\border_id\x18\x01 \x01(\tR\aorderId\x12&\n" +
	"\x0fclient_order_id\x18\x02 \x01(\tR\rclientOrderId\x12\x16\n" +
	"\x06symbol\x18\x03 \x01(\tR\x06symbol\x12\x12\n" +
	"\x04side\x18\x04 \x01(\tR\x04side\x12\x12\n" +
	"\x04type\x18\x05 \x01(\tR\x04type\x12\x16\n" +
	"\x06status\x18\x06 \x01(\tR\x06status\x12\x14\n" +
	"\x05price\x18\a \x01(\x01R\x05price\x12\x1a\n" +
	"\bquantity\x18\b \x01(\x01R\bquantity\x12'\n" +
	"\x0ffilled_quantity\x18\t \x01(\x01R\x0efilledQuantity\x12$\n" +
	"\x0eavg_fill_price\x18\n" +
	" \x01(\x01R\favgFillPrice\x12\x1c\n" +
	"\ttimestamp\x18\v \x01(\x03R\ttimestamp\"\x91\x02\n" +
	"\fTradePayload\x12\x19\n" +
	"\btrade_id\x18\x01 \x01(\tR\atradeId\x12\x19\n" +
	"\border_id\x18\x02 \x01(\tR\aorderId\x12\x16\n" +
	"\x06symbol\x18\x03 \x01(\tR\x06symbol\x12\x12\n" +
	"\x04side\x18\x04 \x01(\tR\x04side\x12\x14\n" +
	"\x05price\x18\x05 \x01(\x01R\x05price\x12\x1a\n" +
	"\bquantity\x18\x06 \x01(\x01R\bquantity\x12\x1c\n" +
	"\ttimestamp\x18\a \x01(\x03R\ttimestamp\x12\x1a\n" +
	"\bexchange\x18\b \x01(\tR\bexchange\x12\x10\n" +
	"\x03fee\x18\t \x01(\x01R\x03fee\x12!\n" +
	"\ffee_currency\x18\n" +
	" \x01(\tR\vfeeCurrency\"0\n" +
	"\x10HeartbeatPayload\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\"\x93\x01\n" +
	"\x13SubscriptionPayload\x12\x16\n" +
	"\x06action\x18\x01 \x01(\tR\x06action\x12\x18\n" +
	"\achannel\x18\x02 \x01(\tR\achannel\x12\x16\n" +
	"\x06symbol\x18\x03 \x01(\tR\x06symbol\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x05 \x01(\tR\amessage\"P\n" +
	"\fErrorPayload\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x12\n" +
	"\x04data\x18\x03 \x01(\tR\x04dataB*Z(github.com/abdoElHodaky/tradSys/proto/wsb\x06proto3"

var (
	file_proto_ws_message_proto_rawDescOnce sync.Once
	file_proto_ws_message_proto_rawDescData []byte
)

func file_proto_ws_message_proto_rawDescGZIP() []byte {
	file_proto_ws_message_proto_rawDescOnce.Do(func() {
		file_proto_ws_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_ws_message_proto_rawDesc), len(file_proto_ws_message_proto_rawDesc)))
	})
	return file_proto_ws_message_proto_rawDescData
}

var file_proto_ws_message_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_ws_message_proto_goTypes = []any{
	(*WebSocketMessage)(nil),    // 0: ws.WebSocketMessage
	(*MarketDataPayload)(nil),   // 1: ws.MarketDataPayload
	(*OrderBookSnapshot)(nil),   // 2: ws.OrderBookSnapshot
	(*OrderBookLevel)(nil),      // 3: ws.OrderBookLevel
	(*OrderPayload)(nil),        // 4: ws.OrderPayload
	(*TradePayload)(nil),        // 5: ws.TradePayload
	(*HeartbeatPayload)(nil),    // 6: ws.HeartbeatPayload
	(*SubscriptionPayload)(nil), // 7: ws.SubscriptionPayload
	(*ErrorPayload)(nil),        // 8: ws.ErrorPayload
}
var file_proto_ws_message_proto_depIdxs = []int32{
	1, // 0: ws.WebSocketMessage.market_data:type_name -> ws.MarketDataPayload
	4, // 1: ws.WebSocketMessage.order:type_name -> ws.OrderPayload
	5, // 2: ws.WebSocketMessage.trade:type_name -> ws.TradePayload
	6, // 3: ws.WebSocketMessage.heartbeat:type_name -> ws.HeartbeatPayload
	7, // 4: ws.WebSocketMessage.subscription:type_name -> ws.SubscriptionPayload
	8, // 5: ws.WebSocketMessage.error:type_name -> ws.ErrorPayload
	2, // 6: ws.MarketDataPayload.order_book:type_name -> ws.OrderBookSnapshot
	3, // 7: ws.OrderBookSnapshot.bids:type_name -> ws.OrderBookLevel
	3, // 8: ws.OrderBookSnapshot.asks:type_name -> ws.OrderBookLevel
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_proto_ws_message_proto_init() }
func file_proto_ws_message_proto_init() {
	if File_proto_ws_message_proto != nil {
		return
	}
	file_proto_ws_message_proto_msgTypes[0].OneofWrappers = []any{
		(*WebSocketMessage_MarketData)(nil),
		(*WebSocketMessage_Order)(nil),
		(*WebSocketMessage_Trade)(nil),
		(*WebSocketMessage_Heartbeat)(nil),
		(*WebSocketMessage_Subscription)(nil),
		(*WebSocketMessage_Error)(nil),
		(*WebSocketMessage_Text)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_ws_message_proto_rawDesc), len(file_proto_ws_message_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_ws_message_proto_goTypes,
		DependencyIndexes: file_proto_ws_message_proto_depIdxs,
		MessageInfos:      file_proto_ws_message_proto_msgTypes,
	}.Build()
	File_proto_ws_message_proto = out.File
	file_proto_ws_message_proto_goTypes = nil
	file_proto_ws_message_proto_depIdxs = nil
}
