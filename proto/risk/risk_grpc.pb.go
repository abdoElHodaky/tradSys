// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/risk/risk.proto

package risk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RiskService_GetAccountRisk_FullMethodName   = "/risk.RiskService/GetAccountRisk"
	RiskService_GetPositionRisk_FullMethodName  = "/risk.RiskService/GetPositionRisk"
	RiskService_GetOrderRisk_FullMethodName     = "/risk.RiskService/GetOrderRisk"
	RiskService_ValidateOrder_FullMethodName    = "/risk.RiskService/ValidateOrder"
	RiskService_UpdateRiskLimits_FullMethodName = "/risk.RiskService/UpdateRiskLimits"
)

// RiskServiceClient is the client API for RiskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RiskService provides risk management functionality
type RiskServiceClient interface {
	// GetAccountRisk gets risk metrics for an account
	GetAccountRisk(ctx context.Context, in *AccountRiskRequest, opts ...grpc.CallOption) (*AccountRiskResponse, error)
	// GetPositionRisk gets risk metrics for a position
	GetPositionRisk(ctx context.Context, in *PositionRiskRequest, opts ...grpc.CallOption) (*PositionRiskResponse, error)
	// GetOrderRisk gets risk metrics for an order
	GetOrderRisk(ctx context.Context, in *OrderRiskRequest, opts ...grpc.CallOption) (*OrderRiskResponse, error)
	// ValidateOrder validates an order against risk rules
	ValidateOrder(ctx context.Context, in *ValidateOrderRequest, opts ...grpc.CallOption) (*ValidateOrderResponse, error)
	// UpdateRiskLimits updates risk limits for an account
	UpdateRiskLimits(ctx context.Context, in *UpdateRiskLimitsRequest, opts ...grpc.CallOption) (*UpdateRiskLimitsResponse, error)
}

type riskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRiskServiceClient(cc grpc.ClientConnInterface) RiskServiceClient {
	return &riskServiceClient{cc}
}

func (c *riskServiceClient) GetAccountRisk(ctx context.Context, in *AccountRiskRequest, opts ...grpc.CallOption) (*AccountRiskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountRiskResponse)
	err := c.cc.Invoke(ctx, RiskService_GetAccountRisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskServiceClient) GetPositionRisk(ctx context.Context, in *PositionRiskRequest, opts ...grpc.CallOption) (*PositionRiskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PositionRiskResponse)
	err := c.cc.Invoke(ctx, RiskService_GetPositionRisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskServiceClient) GetOrderRisk(ctx context.Context, in *OrderRiskRequest, opts ...grpc.CallOption) (*OrderRiskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderRiskResponse)
	err := c.cc.Invoke(ctx, RiskService_GetOrderRisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskServiceClient) ValidateOrder(ctx context.Context, in *ValidateOrderRequest, opts ...grpc.CallOption) (*ValidateOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateOrderResponse)
	err := c.cc.Invoke(ctx, RiskService_ValidateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskServiceClient) UpdateRiskLimits(ctx context.Context, in *UpdateRiskLimitsRequest, opts ...grpc.CallOption) (*UpdateRiskLimitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRiskLimitsResponse)
	err := c.cc.Invoke(ctx, RiskService_UpdateRiskLimits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiskServiceServer is the server API for RiskService service.
// All implementations must embed UnimplementedRiskServiceServer
// for forward compatibility.
//
// RiskService provides risk management functionality
type RiskServiceServer interface {
	// GetAccountRisk gets risk metrics for an account
	GetAccountRisk(context.Context, *AccountRiskRequest) (*AccountRiskResponse, error)
	// GetPositionRisk gets risk metrics for a position
	GetPositionRisk(context.Context, *PositionRiskRequest) (*PositionRiskResponse, error)
	// GetOrderRisk gets risk metrics for an order
	GetOrderRisk(context.Context, *OrderRiskRequest) (*OrderRiskResponse, error)
	// ValidateOrder validates an order against risk rules
	ValidateOrder(context.Context, *ValidateOrderRequest) (*ValidateOrderResponse, error)
	// UpdateRiskLimits updates risk limits for an account
	UpdateRiskLimits(context.Context, *UpdateRiskLimitsRequest) (*UpdateRiskLimitsResponse, error)
	mustEmbedUnimplementedRiskServiceServer()
}

// UnimplementedRiskServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRiskServiceServer struct{}

func (UnimplementedRiskServiceServer) GetAccountRisk(context.Context, *AccountRiskRequest) (*AccountRiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountRisk not implemented")
}
func (UnimplementedRiskServiceServer) GetPositionRisk(context.Context, *PositionRiskRequest) (*PositionRiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionRisk not implemented")
}
func (UnimplementedRiskServiceServer) GetOrderRisk(context.Context, *OrderRiskRequest) (*OrderRiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderRisk not implemented")
}
func (UnimplementedRiskServiceServer) ValidateOrder(context.Context, *ValidateOrderRequest) (*ValidateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateOrder not implemented")
}
func (UnimplementedRiskServiceServer) UpdateRiskLimits(context.Context, *UpdateRiskLimitsRequest) (*UpdateRiskLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRiskLimits not implemented")
}
func (UnimplementedRiskServiceServer) mustEmbedUnimplementedRiskServiceServer() {}
func (UnimplementedRiskServiceServer) testEmbeddedByValue()                     {}

// UnsafeRiskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiskServiceServer will
// result in compilation errors.
type UnsafeRiskServiceServer interface {
	mustEmbedUnimplementedRiskServiceServer()
}

func RegisterRiskServiceServer(s grpc.ServiceRegistrar, srv RiskServiceServer) {
	// If the following call pancis, it indicates UnimplementedRiskServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RiskService_ServiceDesc, srv)
}

func _RiskService_GetAccountRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).GetAccountRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_GetAccountRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).GetAccountRisk(ctx, req.(*AccountRiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskService_GetPositionRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionRiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).GetPositionRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_GetPositionRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).GetPositionRisk(ctx, req.(*PositionRiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskService_GetOrderRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).GetOrderRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_GetOrderRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).GetOrderRisk(ctx, req.(*OrderRiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskService_ValidateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).ValidateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_ValidateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).ValidateOrder(ctx, req.(*ValidateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskService_UpdateRiskLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRiskLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServiceServer).UpdateRiskLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiskService_UpdateRiskLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServiceServer).UpdateRiskLimits(ctx, req.(*UpdateRiskLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RiskService_ServiceDesc is the grpc.ServiceDesc for RiskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RiskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "risk.RiskService",
	HandlerType: (*RiskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountRisk",
			Handler:    _RiskService_GetAccountRisk_Handler,
		},
		{
			MethodName: "GetPositionRisk",
			Handler:    _RiskService_GetPositionRisk_Handler,
		},
		{
			MethodName: "GetOrderRisk",
			Handler:    _RiskService_GetOrderRisk_Handler,
		},
		{
			MethodName: "ValidateOrder",
			Handler:    _RiskService_ValidateOrder_Handler,
		},
		{
			MethodName: "UpdateRiskLimits",
			Handler:    _RiskService_UpdateRiskLimits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/risk/risk.proto",
}
