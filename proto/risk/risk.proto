syntax = "proto3";

package risk;

option go_package = "github.com/abdoElHodaky/tradSys/proto/risk";

// RiskService provides risk management functionality
service RiskService {
  // GetPositions gets positions for a user
  rpc GetPositions(GetPositionsRequest) returns (GetPositionsResponse);
  
  // GetLimits gets risk limits for a user
  rpc GetLimits(GetLimitsRequest) returns (GetLimitsResponse);
  
  // SetLimit sets a risk limit for a user
  rpc SetLimit(SetLimitRequest) returns (RiskLimitResponse);
  
  // DeleteLimit deletes a risk limit
  rpc DeleteLimit(DeleteLimitRequest) returns (DeleteLimitResponse);
  
  // ValidateOrder validates an order against risk limits
  rpc ValidateOrder(ValidateOrderRequest) returns (ValidateOrderResponse);
}

// LimitType represents the type of a risk limit
enum LimitType {
  UNKNOWN_LIMIT = 0;
  MAX_POSITION_SIZE = 1;
  MAX_ORDER_SIZE = 2;
  MAX_DAILY_VOLUME = 3;
  MAX_DAILY_LOSS = 4;
  MAX_LEVERAGE = 5;
  MAX_CONCENTRATION = 6;
}

// GetPositionsRequest represents a request to get positions
message GetPositionsRequest {
  // User ID of the positions
  string user_id = 1;
  
  // Symbol filter (optional)
  string symbol = 2;
}

// GetPositionsResponse represents a response with positions
message GetPositionsResponse {
  // Positions in the response
  repeated PositionResponse positions = 1;
}

// PositionResponse represents a position response
message PositionResponse {
  // Symbol of the position
  string symbol = 1;
  
  // Quantity of the position
  double quantity = 2;
  
  // Average entry price of the position
  double average_entry_price = 3;
  
  // Unrealized PnL of the position
  double unrealized_pnl = 4;
  
  // Realized PnL of the position
  double realized_pnl = 5;
  
  // Last updated time of the position
  int64 last_updated = 6;
}

// GetLimitsRequest represents a request to get risk limits
message GetLimitsRequest {
  // User ID of the limits
  string user_id = 1;
  
  // Symbol filter (optional)
  string symbol = 2;
  
  // Limit type filter (optional)
  LimitType type = 3;
}

// GetLimitsResponse represents a response with risk limits
message GetLimitsResponse {
  // Limits in the response
  repeated RiskLimitResponse limits = 1;
}

// SetLimitRequest represents a request to set a risk limit
message SetLimitRequest {
  // User ID of the limit
  string user_id = 1;
  
  // Symbol of the limit (optional, empty for global limits)
  string symbol = 2;
  
  // Type of the limit
  LimitType type = 3;
  
  // Value of the limit
  double value = 4;
  
  // Whether the limit is enabled
  bool enabled = 5;
}

// RiskLimitResponse represents a risk limit response
message RiskLimitResponse {
  // ID of the limit
  string id = 1;
  
  // User ID of the limit
  string user_id = 2;
  
  // Symbol of the limit (empty for global limits)
  string symbol = 3;
  
  // Type of the limit
  LimitType type = 4;
  
  // Value of the limit
  double value = 5;
  
  // Whether the limit is enabled
  bool enabled = 6;
  
  // Created time of the limit
  int64 created_at = 7;
  
  // Updated time of the limit
  int64 updated_at = 8;
}

// DeleteLimitRequest represents a request to delete a risk limit
message DeleteLimitRequest {
  // ID of the limit
  string id = 1;
  
  // User ID of the limit
  string user_id = 2;
}

// DeleteLimitResponse represents a response to delete a risk limit
message DeleteLimitResponse {
  // Success status
  bool success = 1;
  
  // Error message (if any)
  string error = 2;
}

// ValidateOrderRequest represents a request to validate an order
message ValidateOrderRequest {
  // User ID of the order
  string user_id = 1;
  
  // Symbol of the order
  string symbol = 2;
  
  // Side of the order (buy/sell)
  string side = 3;
  
  // Type of the order (market/limit/etc.)
  string type = 4;
  
  // Quantity of the order
  double quantity = 5;
  
  // Price of the order
  double price = 6;
}

// ValidateOrderResponse represents a response to validate an order
message ValidateOrderResponse {
  // Whether the order is valid
  bool valid = 1;
  
  // Reasons for rejection (if any)
  repeated string rejection_reasons = 2;
  
  // Warnings (if any)
  repeated string warnings = 3;
}

