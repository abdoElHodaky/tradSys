# Multi-stage production Dockerfile for TradSys
# Optimized for security, performance, and minimal attack surface

# Build stage
FROM golang:1.24-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    git \
    ca-certificates \
    tzdata \
    protobuf \
    protobuf-dev \
    make

# Set working directory
WORKDIR /app

# Copy go mod files first for better caching
COPY go.mod go.sum ./
RUN go mod download

# Install protobuf generators
RUN go install google.golang.org/protobuf/cmd/protoc-gen-go@latest && \
    go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

# Copy source code
COPY . .

# Generate protobuf files
RUN chmod +x scripts/generate_proto.sh && \
    ./scripts/generate_proto.sh

# Build the application with optimizations
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o tradsys \
    ./cmd/tradsys

# Verify the binary
RUN ./tradsys --version || echo "Binary built successfully"

# Production stage
FROM scratch AS production

# Import from builder
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group

# Copy the binary
COPY --from=builder /app/tradsys /tradsys

# Copy configuration files
COPY --from=builder /app/configs/ /configs/

# Create non-root user
USER 65534:65534

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["/tradsys", "health-check"]

# Expose ports
EXPOSE 8080 8081 8082 9090

# Set entrypoint
ENTRYPOINT ["/tradsys"]

# Default command
CMD ["server"]

# Labels for metadata
LABEL maintainer="TradSys Team <team@tradsys.com>" \
      version="1.0.0" \
      description="High-frequency trading system" \
      org.opencontainers.image.title="TradSys" \
      org.opencontainers.image.description="Production-ready HFT trading system" \
      org.opencontainers.image.vendor="TradSys" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.source="https://github.com/abdoElHodaky/tradSys"

# Development stage (for debugging)
FROM alpine:3.18 AS development

# Install runtime dependencies for development
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    curl \
    bash \
    htop \
    strace

# Create app user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Set working directory
WORKDIR /app

# Copy binary and configs
COPY --from=builder /app/tradsys /app/tradsys
COPY --from=builder /app/configs/ /app/configs/

# Change ownership
RUN chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["/app/tradsys", "health-check"]

# Expose ports
EXPOSE 8080 8081 8082 9090

# Set entrypoint
ENTRYPOINT ["/app/tradsys"]

# Default command
CMD ["server"]

# Debug stage (for troubleshooting)
FROM golang:1.24-alpine AS debug

# Install debugging tools
RUN apk add --no-cache \
    git \
    ca-certificates \
    tzdata \
    curl \
    bash \
    htop \
    strace \
    gdb \
    delve

# Set working directory
WORKDIR /app

# Copy source and binary
COPY --from=builder /app/ /app/

# Install delve for debugging
RUN go install github.com/go-delve/delve/cmd/dlv@latest

# Build with debug symbols
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -gcflags="all=-N -l" \
    -o tradsys-debug \
    ./cmd/tradsys

# Expose debug port
EXPOSE 8080 8081 8082 9090 40000

# Default command for debugging
CMD ["dlv", "--listen=:40000", "--headless=true", "--api-version=2", "--accept-multiclient", "exec", "./tradsys-debug"]

# Monitoring stage (with additional monitoring tools)
FROM alpine:3.18 AS monitoring

# Install monitoring dependencies
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    curl \
    bash \
    htop \
    iotop \
    nethogs \
    tcpdump

# Create app user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Set working directory
WORKDIR /app

# Copy binary and configs
COPY --from=builder /app/tradsys /app/tradsys
COPY --from=builder /app/configs/ /app/configs/

# Add monitoring scripts
COPY deployments/docker/scripts/ /app/scripts/
RUN chmod +x /app/scripts/*.sh

# Change ownership
RUN chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Health check with enhanced monitoring
HEALTHCHECK --interval=15s --timeout=5s --start-period=10s --retries=5 \
    CMD ["/app/scripts/health-check.sh"]

# Expose ports including monitoring
EXPOSE 8080 8081 8082 9090 9091

# Set entrypoint
ENTRYPOINT ["/app/tradsys"]

# Default command
CMD ["server", "--enable-monitoring"]
