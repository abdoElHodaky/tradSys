apiVersion: apps/v1
kind: Deployment
metadata:
  name: tradsys-core
  namespace: tradsys
  labels:
    app.kubernetes.io/name: tradsys
    app.kubernetes.io/component: core
    app.kubernetes.io/version: "v2.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: tradsys
      app.kubernetes.io/component: core
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tradsys
        app.kubernetes.io/component: core
        app.kubernetes.io/version: "v2.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: tradsys
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: tradsys
        image: tradsys:v2.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: grpc
          containerPort: 8081
          protocol: TCP
        - name: ws
          containerPort: 8082
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: TRADSYS_ENVIRONMENT
          value: "production"
        - name: TRADSYS_CONFIG_PATH
          value: "/app/config/production.json"
        - name: TRADSYS_LOG_LEVEL
          value: "info"
        - name: TRADSYS_METRICS_ENABLED
          value: "true"
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: logs
          mountPath: /app/logs
        - name: reports
          mountPath: /app/reports
        resources:
          requests:
            cpu: "1"
            memory: "2Gi"
          limits:
            cpu: "4"
            memory: "8Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: tradsys-config
      - name: logs
        emptyDir: {}
      - name: reports
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - tradsys
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - core
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: tradsys-core
  namespace: tradsys
  labels:
    app.kubernetes.io/name: tradsys
    app.kubernetes.io/component: core
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: grpc
    port: 8081
    targetPort: grpc
    protocol: TCP
  - name: ws
    port: 8082
    targetPort: ws
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: tradsys
    app.kubernetes.io/component: core
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tradsys
  namespace: tradsys
  labels:
    app.kubernetes.io/name: tradsys
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: tradsys
  namespace: tradsys
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tradsys
  namespace: tradsys
subjects:
- kind: ServiceAccount
  name: tradsys
  namespace: tradsys
roleRef:
  kind: Role
  name: tradsys
  apiGroup: rbac.authorization.k8s.io

