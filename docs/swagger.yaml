openapi: 3.0.0
info:
  title: TradSys API
  description: API for the TradSys trading platform
  version: 1.0.0
  contact:
    name: TradSys Support
    email: support@tradsys.com

servers:
  - url: /api/v1
    description: Main API server

tags:
  - name: pairs
    description: Pairs trading operations
  - name: orders
    description: Order management operations
  - name: strategies
    description: Trading strategy operations

paths:
  /pairs:
    get:
      summary: Get all pairs
      description: Returns a list of all trading pairs
      tags:
        - pairs
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PairResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new pair
      description: Creates a new trading pair
      tags:
        - pairs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PairRequest'
      responses:
        '201':
          description: Pair created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PairResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pairs/{id}:
    get:
      summary: Get a specific pair
      description: Returns a specific trading pair by ID
      tags:
        - pairs
      parameters:
        - name: id
          in: path
          required: true
          description: Pair ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PairResponse'
        '404':
          description: Pair not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a pair
      description: Updates an existing trading pair
      tags:
        - pairs
      parameters:
        - name: id
          in: path
          required: true
          description: Pair ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PairRequest'
      responses:
        '200':
          description: Pair updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PairResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pair not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a pair
      description: Deletes a trading pair
      tags:
        - pairs
      parameters:
        - name: id
          in: path
          required: true
          description: Pair ID
          schema:
            type: string
      responses:
        '200':
          description: Pair deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Pair deleted successfully
        '404':
          description: Pair not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pairs/{id}/statistics:
    get:
      summary: Get pair statistics
      description: Returns statistics for a specific trading pair
      tags:
        - pairs
      parameters:
        - name: id
          in: path
          required: true
          description: Pair ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PairStatistics'
        '404':
          description: Pair not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pairs/{id}/positions:
    get:
      summary: Get pair positions
      description: Returns positions for a specific trading pair
      tags:
        - pairs
      parameters:
        - name: id
          in: path
          required: true
          description: Pair ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PairPosition'
        '404':
          description: Pair not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pairs/{id}/analyze:
    post:
      summary: Analyze a pair
      description: Analyzes a trading pair using historical price data
      tags:
        - pairs
      parameters:
        - name: id
          in: path
          required: true
          description: Pair ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzeResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pair not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pairs/{id}/strategy:
    post:
      summary: Create a strategy for a pair
      description: Creates a new trading strategy for a pair
      tags:
        - strategies
      parameters:
        - name: id
          in: path
          required: true
          description: Pair ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStrategyRequest'
      responses:
        '201':
          description: Strategy created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Strategy created and started successfully
                  strategy_name:
                    type: string
                    example: pair_strategy_123
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Pair not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pairs/{id}/strategy/{strategy_id}:
    put:
      summary: Update a strategy
      description: Updates an existing trading strategy
      tags:
        - strategies
      parameters:
        - name: id
          in: path
          required: true
          description: Pair ID
          schema:
            type: string
        - name: strategy_id
          in: path
          required: true
          description: Strategy ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStrategyRequest'
      responses:
        '200':
          description: Strategy updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Strategy updated successfully
                  strategy_name:
                    type: string
                    example: pair_strategy_123
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Strategy not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a strategy
      description: Deletes a trading strategy
      tags:
        - strategies
      parameters:
        - name: id
          in: path
          required: true
          description: Pair ID
          schema:
            type: string
        - name: strategy_id
          in: path
          required: true
          description: Strategy ID
          schema:
            type: string
      responses:
        '200':
          description: Strategy deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Strategy deleted successfully
        '404':
          description: Strategy not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders:
    get:
      summary: Get all orders
      description: Returns a list of all orders
      tags:
        - orders
      parameters:
        - name: symbol
          in: query
          required: false
          description: Symbol filter
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: Status filter
          schema:
            type: string
            enum: [pending, open, filled, canceled, rejected]
        - name: start_time
          in: query
          required: false
          description: Start time filter (Unix timestamp in milliseconds)
          schema:
            type: integer
            format: int64
        - name: end_time
          in: query
          required: false
          description: End time filter (Unix timestamp in milliseconds)
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          required: false
          description: Maximum number of orders to return
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new order
      description: Creates a new order
      tags:
        - orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/{id}:
    get:
      summary: Get a specific order
      description: Returns a specific order by ID
      tags:
        - orders
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Cancel an order
      description: Cancels an existing order
      tags:
        - orders
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      responses:
        '200':
          description: Order canceled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    PairRequest:
      type: object
      required:
        - symbol1
        - symbol2
        - status
        - lookback_period
      properties:
        symbol1:
          type: string
          example: BTC
        symbol2:
          type: string
          example: ETH
        ratio:
          type: number
          format: float
          example: 0.075
        status:
          type: string
          enum: [active, inactive, pending]
          example: active
        z_score_threshold_entry:
          type: number
          format: float
          example: 2.0
        z_score_threshold_exit:
          type: number
          format: float
          example: 0.5
        lookback_period:
          type: integer
          example: 100
        notes:
          type: string
          example: Bitcoin/Ethereum pair for statistical arbitrage

    PairResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        pair_id:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
        symbol1:
          type: string
          example: BTC
        symbol2:
          type: string
          example: ETH
        ratio:
          type: number
          format: float
          example: 0.075
        status:
          type: string
          enum: [active, inactive, pending]
          example: active
        correlation:
          type: number
          format: float
          example: 0.85
        cointegration:
          type: number
          format: float
          example: -3.5
        z_score_threshold_entry:
          type: number
          format: float
          example: 2.0
        z_score_threshold_exit:
          type: number
          format: float
          example: 0.5
        lookback_period:
          type: integer
          example: 100
        half_life:
          type: integer
          example: 24
        created_by:
          type: integer
          example: 1
        notes:
          type: string
          example: Bitcoin/Ethereum pair for statistical arbitrage
        created_at:
          type: string
          format: date-time
          example: 2023-01-01T00:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 2023-01-02T00:00:00Z

    PairStatistics:
      type: object
      properties:
        id:
          type: integer
          example: 1
        pair_id:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
        timestamp:
          type: string
          format: date-time
          example: 2023-01-01T00:00:00Z
        correlation:
          type: number
          format: float
          example: 0.85
        cointegration:
          type: number
          format: float
          example: -3.5
        spread_mean:
          type: number
          format: float
          example: 0.0
        spread_std_dev:
          type: number
          format: float
          example: 1.0
        current_z_score:
          type: number
          format: float
          example: 1.5
        spread_value:
          type: number
          format: float
          example: 1.5

    PairPosition:
      type: object
      properties:
        id:
          type: integer
          example: 1
        pair_id:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
        strategy_id:
          type: string
          example: strategy_123
        entry_timestamp:
          type: string
          format: date-time
          example: 2023-01-01T00:00:00Z
        entry_price1:
          type: number
          format: float
          example: 50000.0
        entry_price2:
          type: number
          format: float
          example: 3500.0
        entry_z_score:
          type: number
          format: float
          example: 2.5
        quantity1:
          type: number
          format: float
          example: 0.1
        quantity2:
          type: number
          format: float
          example: 1.5
        current_price1:
          type: number
          format: float
          example: 51000.0
        current_price2:
          type: number
          format: float
          example: 3600.0
        current_z_score:
          type: number
          format: float
          example: 1.2
        pnl:
          type: number
          format: float
          example: 150.0
        status:
          type: string
          enum: [open, closed]
          example: open
        exit_timestamp:
          type: string
          format: date-time
          example: null

    AnalyzeRequest:
      type: object
      required:
        - prices1
        - prices2
      properties:
        prices1:
          type: array
          items:
            type: number
            format: float
          example: [50000.0, 51000.0, 52000.0]
        prices2:
          type: array
          items:
            type: number
            format: float
          example: [3500.0, 3600.0, 3700.0]

    AnalyzeResponse:
      type: object
      properties:
        correlation:
          type: number
          format: float
          example: 0.85
        cointegration:
          type: number
          format: float
          example: -3.5
        is_cointegrated:
          type: boolean
          example: true
        optimal_ratio:
          type: number
          format: float
          example: 0.075
        spread_mean:
          type: number
          format: float
          example: 0.0
        spread_std_dev:
          type: number
          format: float
          example: 1.0
        current_z_score:
          type: number
          format: float
          example: 1.5
        half_life:
          type: integer
          example: 24
        spread:
          type: array
          items:
            type: number
            format: float
          example: [0.5, 0.8, 1.2]

    CreateStrategyRequest:
      type: object
      required:
        - name
        - z_score_entry
        - z_score_exit
        - position_size
        - max_positions
        - update_interval
      properties:
        name:
          type: string
          example: BTC-ETH Strategy
        z_score_entry:
          type: number
          format: float
          example: 2.0
        z_score_exit:
          type: number
          format: float
          example: 0.5
        position_size:
          type: number
          format: float
          example: 1000.0
        max_positions:
          type: integer
          example: 5
        update_interval:
          type: string
          example: 1m

    UpdateStrategyRequest:
      type: object
      properties:
        z_score_entry:
          type: number
          format: float
          example: 2.5
        z_score_exit:
          type: number
          format: float
          example: 0.75
        position_size:
          type: number
          format: float
          example: 1500.0
        max_positions:
          type: integer
          example: 3
        update_interval:
          type: string
          example: 5m

    CreateOrderRequest:
      type: object
      required:
        - symbol
        - type
        - side
        - quantity
      properties:
        symbol:
          type: string
          example: BTC-USD
        type:
          type: string
          enum: [market, limit, stop, stop_limit]
          example: limit
        side:
          type: string
          enum: [buy, sell]
          example: buy
        quantity:
          type: number
          format: float
          example: 0.1
        price:
          type: number
          format: float
          example: 50000.0
        stop_price:
          type: number
          format: float
          example: 0.0
        client_order_id:
          type: string
          example: client_123

    OrderResponse:
      type: object
      properties:
        order_id:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
        symbol:
          type: string
          example: BTC-USD
        type:
          type: string
          enum: [market, limit, stop, stop_limit]
          example: limit
        side:
          type: string
          enum: [buy, sell]
          example: buy
        status:
          type: string
          enum: [pending, open, filled, canceled, rejected]
          example: open
        quantity:
          type: number
          format: float
          example: 0.1
        filled_quantity:
          type: number
          format: float
          example: 0.05
        price:
          type: number
          format: float
          example: 50000.0
        stop_price:
          type: number
          format: float
          example: 0.0
        created_at:
          type: integer
          format: int64
          example: 1625097600000
        updated_at:
          type: integer
          format: int64
          example: 1625097660000
        client_order_id:
          type: string
          example: client_123

    Error:
      type: object
      properties:
        error:
          type: string
          example: Something went wrong

